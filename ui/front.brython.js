__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1588469512333, "front": [".py", "from browser import alert,document,websocket\n\nfrom front.components.deck import DeckComponent\nfrom front.components.login import LoginComponent\nfrom front.components.match import MatchComponent\nfrom front.components.wait import WaitComponent\nfrom front.components.mulligan import MulliganComponent\n\n\ndef on_open(evt):\n pass\n \n \ndef on_message(evt):\n\n switch={\n 'request_name':login_component.show,\n 'request_deck':deck_component.show,\n 'request_match':match_component.show,\n 'request_match_password':send_match_password,\n 'waiting_other_players':wait_component.show\n }\n \n key=evt.data\n \n if key in switch:\n  switch[key]()\n elif '['in key:\n  cards=list(key[2:-2].split(\"', '\"))\n  mulligan_component.set_hand(cards)\n  mulligan_component.show()\n  wait_component.hide()\n  \n  \ndef on_close(evt):\n alert(\"Connection is closed\")\n \n \ndef send_name(*args,**kwargs):\n name=login_component.get_user_name()\n ws.send(name)\n login_component.hide()\n \n \ndef send_deck(*args,**kwargs):\n deck_component.hide()\n deck=deck_component.get_deck()\n deck=deck.split('\\n')\n for line in deck:\n  ws.send(line)\n ws.send('end_deck')\n \n \ndef send_match(*args,**kwargs):\n name=match_component.get_match_name()\n ws.send(name)\n \n \ndef send_match_password(*args,**kwargs):\n password=match_component.get_match_password()\n ws.send(password)\n match_component.hide()\n \n \nws=websocket.WebSocket(\"ws://0.0.0.0:8080/ws\")\n\nws.bind('open',on_open)\nws.bind('message',on_message)\nws.bind('close',on_close)\n\nlogin_component=LoginComponent(document)\nlogin_component.set_login_action(send_name)\n\ndeck_component=DeckComponent(document)\ndeck_component.set_deck_end_action(send_deck)\n\nmatch_component=MatchComponent(document)\nmatch_component.set_ok_action(send_match)\n\nwait_component=WaitComponent(document)\n\nmulligan_component=MulliganComponent(document)\n", ["browser", "front.components.deck", "front.components.login", "front.components.match", "front.components.mulligan", "front.components.wait"], 1], "front.components.match": [".py", "from front.components import Component\n\n\nclass MatchComponent(Component):\n _match_container='matchContainer'\n _match_input='matchInput'\n _match_password_input='matchPasswordInput'\n _match_buton='matchButton'\n \n def __init__(self,document):\n  super(MatchComponent,self).__init__(\n  document,\n  MatchComponent._match_container\n  )\n  self._input=document[MatchComponent._match_input]\n  self._password_input=document[MatchComponent._match_password_input]\n  self._ok=document[MatchComponent._match_buton]\n  self._first_try=True\n  \n def get_match_name(self):\n  return self._input.value\n  \n def get_match_password(self):\n  return self._password_input.value\n  \n def set_ok_action(self,action):\n  self._ok.bind(\n  'click',\n  action\n  )\n  \n def show(self):\n  super(MatchComponent,self).show()\n  if not self._first_try:\n   self._input.classList.add('is-danger')\n   self._input.classList.add('is-outlined')\n  self._first_try=False\n  self._input.value=''\n  self._password_input.value=''\n", ["front.components"]], "front.components.wait": [".py", "from front.components import Component\n\n\nclass WaitComponent(Component):\n _wait_container='waitContainer'\n \n def __init__(self,document):\n  super(WaitComponent,self).__init__(\n  document,\n  WaitComponent._wait_container\n  )\n", ["front.components"]], "front.components": [".py", "class Component:\n\n def __init__(self,document,element_id):\n  self._document=document\n  self._element=document[element_id]\n  self._display=self._element.style.display\n  self.hide()\n  \n def hide(self):\n  self._element.style.display='none'\n  \n def show(self):\n  self._element.style.display=''\n", [], 1], "front.components.login": [".py", "from front.components import Component\n\n\nclass LoginComponent(Component):\n _login_container='loginContainer'\n _name_input='nameInput'\n _login_button='loginButton'\n \n def __init__(self,document):\n  super(LoginComponent,self).__init__(\n  document,\n  LoginComponent._login_container\n  )\n  self._name_input=document[LoginComponent._name_input]\n  self._login_button=document[LoginComponent._login_button]\n  self._first_try=True\n  \n def get_user_name(self):\n  return self._name_input.value\n  \n def set_login_action(self,action):\n  self._login_button.bind(\n  'click',\n  action\n  )\n  \n def show(self):\n  super(LoginComponent,self).show()\n  if not self._first_try:\n   self._name_input.classList.add('is-danger')\n   self._name_input.classList.add('is-outlined')\n  self._first_try=False\n  self._name_input.value=''\n", ["front.components"]], "front.components.deck": [".py", "from front.components import Component\n\n\nclass DeckComponent(Component):\n _deck_container='deckContainer'\n _deck_input='deckInput'\n _deck_end_button='deckEndButton'\n \n def __init__(self,document):\n  super(DeckComponent,self).__init__(\n  document,\n  DeckComponent._deck_container\n  )\n  self._input=document[DeckComponent._deck_input]\n  self._ok=document[DeckComponent._deck_end_button]\n  \n def get_deck(self):\n  return self._input.value\n  \n def set_deck_end_action(self,action):\n  self._ok.bind(\n  'click',\n  action\n  )\n  \n def reset(self):\n  self._input.value=''\n", ["front.components"]], "front.components.mulligan": [".py", "from browser import ajax\n\nfrom front.components import Component\n\n\nclass MulliganComponent(Component):\n _wait_container='mulliganContainer'\n _keep_button_id='\u1e31eepButton'\n _mulligan_button_id='mulliganButton'\n _cards_mulligan_container_id='cardsMulliganContainer'\n \n def __init__(self,document):\n  super(MulliganComponent,self).__init__(\n  document,\n  MulliganComponent._wait_container\n  )\n  self._keep_button=document[MulliganComponent._keep_button_id]\n  self._mulligan_button=document[MulliganComponent._mulligan_button_id]\n  \n def set_keep_action(self,action):\n  self._keep_button.bind('click',action)\n  \n def set_mulligan_action(self,action):\n  self._mulligan_button.bind('click',action)\n  \n def set_hand(self,cards):\n  images=self._document[MulliganComponent._cards_mulligan_container_id]\n  self._element.appendChild(images)\n  \n  def foo(response):\n   start=response.text.index('small')\n   start +=len('small')+3\n   end=response.text.index(',',start)\n   end -=1\n   sub=response.text[start:end]\n   \n   img=self._document.createElement('img')\n   img.src=sub\n   images.appendChild(img)\n   \n  for card in cards:\n   request=ajax.Ajax()\n   request.bind('complete',foo)\n   request.open(\n   'GET',\n   'https://api.scryfall.com/cards/named?exact='+card.replace(' ','+')\n   )\n   request.send()\n", ["browser", "front.components"]]}
__BRYTHON__.update_VFS(scripts)
