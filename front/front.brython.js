__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1588385168308, "front": [".py", "from browser import alert,document,websocket\n\nfrom front.components.login import LoginComponent\nfrom front.components.deck import DeckComponent\nfrom front.components.match import MatchComponent\n\n\ndef on_open(evt):\n pass\n \n \ndef on_message(evt):\n\n switch={\n 'request_name':login_component.show,\n 'request_deck':deck_component.show,\n 'request_match':match_component.show\n }\n \n key=evt.data\n \n if key in switch:\n  switch[key]()\n  \n  \ndef on_close(evt):\n\n alert(\"Connection is closed\")\n \n \ndef send_name(*args,**kwargs):\n name=login_component.get_user_name()\n ws.send(name)\n login_component.hide()\n \n \ndef send_deck(*args,**kwargs):\n deck_component.hide()\n deck=deck_component.get_deck()\n deck=deck.split()\n for line in deck:\n  ws.send(line)\n ws.send('end_deck')\n \n \ndef send_match(*args,**kwargs):\n match_component.hide()\n name=match_component.get_match_name()\n ws.send(name)\n password=match_component.get_match_password()\n ws.send(password)\n \n \nws=websocket.WebSocket(\"ws://0.0.0.0:8080/ws\")\n\nws.bind('open',on_open)\nws.bind('message',on_message)\nws.bind('close',on_close)\n\nlogin_component=LoginComponent(document)\nlogin_component.set_login_action(send_name)\n\ndeck_component=DeckComponent(document)\ndeck_component.set_deck_end_action(send_deck)\n\nmatch_component=MatchComponent(document)\nmatch_component.set_ok_action(send_match)\n", ["browser", "front.components.deck", "front.components.login", "front.components.match"], 1], "front.components.match": [".py", "class MatchComponent:\n\n _match_container='matchContainer'\n _match_input='matchInput'\n _match_password_input='matchPasswordInput'\n _match_buton='matchButton'\n \n def __init__(self,doc):\n  self._container=doc[MatchComponent._match_container]\n  self._input=doc[MatchComponent._match_input]\n  self._password_input=doc[MatchComponent._match_password_input]\n  self._ok=doc[MatchComponent._match_buton]\n  self._first_try=True\n  self.hide()\n  \n def get_match_name(self):\n  return self._input.value\n  \n def get_match_password(self):\n  return self._password_input.value\n  \n def set_ok_action(self,action):\n  self._ok.bind(\n  'click',\n  action\n  )\n  \n def hide(self):\n  self._container.style.display='none'\n  \n def show(self):\n  if not self._first_try:\n   self._input.classList.add('is-danger')\n   self._input.classList.add('is-outlined')\n  self._first_try=False\n  self._input.value=''\n  self._password_input.value=''\n  self._container.style.display='flex'\n", []], "front.components.wait": [".py", "class WaitComponent:\n\n _wait_container='waitContainer'\n \n def __init__(self,doc):\n  self._container=doc[WaitComponent._wait_container]\n  self.hide()\n  \n def hide(self):\n  self._container.style.display='none'\n  \n def show(self):\n  self._container.style.display='flex'\n", []], "front.components": [".py", "", [], 1], "front.components.login": [".py", "class LoginComponent:\n\n _login_container='loginContainer'\n _name_input='nameInput'\n _login_button='loginButton'\n \n def __init__(self,doc):\n  self._container=doc[LoginComponent._login_container]\n  self._name_input=doc[LoginComponent._name_input]\n  self._login_button=doc[LoginComponent._login_button]\n  self._first_try=True\n  self.hide()\n  \n def get_user_name(self):\n  return self._name_input.value\n  \n def set_login_action(self,action):\n  self._login_button.bind(\n  'click',\n  action\n  )\n  \n def hide(self):\n  self._container.style.display='none'\n  \n def show(self):\n  if not self._first_try:\n   self._name_input.classList.add('is-danger')\n   self._name_input.classList.add('is-outlined')\n  self._first_try=False\n  self._name_input.value=''\n  self._container.style.display='flex'\n", []], "front.components.deck": [".py", "class DeckComponent:\n\n _deck_container='deckContainer'\n _deck_input='deckInput'\n _deck_end_button='deckEndButton'\n \n def __init__(self,doc):\n  self._container=doc[DeckComponent._deck_container]\n  self._input=doc[DeckComponent._deck_input]\n  self._ok=doc[DeckComponent._deck_end_button]\n  self.hide()\n  \n def get_deck(self):\n  return self._input.value\n  \n def set_deck_end_action(self,action):\n  self._ok.bind(\n  'click',\n  action\n  )\n  \n def hide(self):\n  self._container.style.display='none'\n  \n def show(self):\n  self._input.value=''\n  self._container.style.display='flex'\n", []]}
__BRYTHON__.update_VFS(scripts)
