__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1593895871838, "tictactoe": [".py", "import json\n\nfrom browser import document,alert\nfrom browser.websocket import WebSocket\n\nfrom .views import swap_view,View\nfrom .views.board import BoardView\nfrom .views.login import LoginView\nfrom .views.match_selector import MatchSelectorView\n\nloading=View(document,template_id='LoadingView')\nloading.show()\n\nlogin=LoginView(document)\n\nmatch_selector=MatchSelectorView(document)\n\nboard=BoardView(document)\n\nws=WebSocket('wss://nano-tcg.herokuapp.com/ws')\n\n\ndef on_ws_event(event):\n data=json.loads(event.data)\n print(f'{event}:{data}')\n if 'message'in data:\n  message=data['message']\n  if message =='request_client_id':\n   def send_user_name(user_name):\n    json_response=json.dumps(dict(\n    client_id=user_name\n    ))\n    ws.send(json_response)\n    swap_view(login,loading)\n    \n   login.on_login(send_user_name)\n   swap_view(loading,login)\n  elif message =='alert_unavailable_player_id':\n   login.login_error()\n   swap_view(loading,login)\n  elif message =='request_match_id_and_password':\n   options=data['options']\n   match_selector.display_match_list(options)\n   \n   def join_match(match_id,match_password):\n    json_response=json.dumps(dict(\n    match_id=match_id,\n    password=match_password\n    ))\n    ws.send(json_response)\n    swap_view(match_selector,loading)\n    \n   match_selector.on_join(join_match)\n   swap_view(loading,match_selector)\n  elif message =='sync':\n   board.display(data['match']['board'])\n   board.show()\n   loading.hide()\n  elif message =='request_move':\n   def send_play(index):\n    print(index)\n    print(data['options'][index])\n    json_response=json.dumps(dict(\n    movement_index=index\n    ))\n    ws.send(json_response)\n    \n   board.enable_play(data['options'],send_play)\n   board.show()\n  elif message =='notify_game_over':\n   winner=data['winner']\n   alert(f'{winner} won')\n   \n   \nws.bind('message',on_ws_event)\n", ["browser", "browser.websocket", "json", "tictactoe.views", "tictactoe.views.board", "tictactoe.views.login", "tictactoe.views.match_selector"], 1], "tictactoe.views.board": [".py", "from . import View\n\n\nclass BoardView(View):\n children=[\n 'board_table'\n ]\n \n def display(self,board):\n  self.board_table.innerHTML=''\n  for row in board:\n   tr=self.doc.createElement('tr')\n   for cell in row:\n    td=self.doc.createElement('td')\n    td.innerText=cell\n    tr.appendChild(td)\n   self.board_table.appendChild(tr)\n   \n def enable_play(self,options,on_play):\n \n  def play_button_callback_factory(index,func):\n   def callback(*args,**kwargs):\n    return func(index)\n    \n   return callback\n   \n  for i,option in enumerate(options):\n   row_index=int(option['row'])\n   row=self.board_table.children[row_index]\n   column_index=int(option['column'])\n   cell=row.children[column_index]\n   cell.innerText=''\n   button=self.doc.createElement('button')\n   button.textContent='*'\n   button.onclick=play_button_callback_factory(i,on_play)\n   cell.appendChild(button)\n", ["tictactoe.views"]], "tictactoe.views": [".py", "def instantiate_template(document,template_id):\n template=document[template_id]\n instance=template.content.cloneNode(True )\n if instance.firstElementChild.id:\n  instance.firstElementChild.id=f'{instance.firstElementChild.id}_{id(instance)}'\n else :\n  instance.firstElementChild.id=f'{template_id}_{id(instance)}'\n instance_id=instance.firstElementChild.id\n document.body.append(instance)\n return document[instance_id]\n \n \ndef swap_view(to_hide,to_show):\n to_hide.hide()\n to_show.show()\n \n \ndef fill_table(document,data_dicts,table_element=None ,**header_aliases):\n table_element=table_element or document.createElement('table')\n if len(data_dicts)==0 and len(header_aliases)==0:\n  return table_element\n  \n if len(header_aliases)==0:\n  header_aliases={key:key for key in data_dicts[0].keys()}\n  \n tr=document.createElement('tr')\n for alias in header_aliases.values():\n  th=document.createElement('th')\n  th.innerText=alias\n  tr.appendChild(th)\n  \n thead=document.createElement('thead')\n thead.appendChild(tr)\n \n table_element.appendChild(thead)\n \n tbody=document.createElement('tbody')\n for data in data_dicts:\n  tr=document.createElement('tr')\n  for header in header_aliases.keys():\n   td=document.createElement('td')\n   td.innerText=data[header]\n   tr.appendChild(td)\n  tbody.appendChild(tr)\n table_element.appendChild(tbody)\n \n return table_element\n \n \nclass View:\n _children_attr_name='children'\n \n def __init__(self,\n document,\n template_id=None ,\n parent_id='root'):\n \n  view_type=type(self)\n  \n  default_template_id=view_type.__name__\n  template_id=template_id or default_template_id\n  element=instantiate_template(document,template_id)\n  \n  if parent_id in document:\n   parent=document[parent_id]\n  else :\n   parent=document.body\n  parent.appendChild(element)\n  \n  if hasattr(view_type,View._children_attr_name):\n   self_attrs=self.__dict__\n   view_type_attrs=view_type.__dict__\n   for child in view_type_attrs[View._children_attr_name]:\n    name_query=f'[name={child}]'\n    child_element=element.querySelector(name_query)\n    self_attrs[child]=child_element\n    \n  self.doc=document\n  self.element=element\n  self._default_style_display=element.style.display\n  self.hide()\n  \n def hide(self):\n  self.element.style.display='none'\n  \n def show(self):\n  self.element.style.display=self._default_style_display\n  self.element.focus()\n", [], 1], "tictactoe.views.login": [".py", "from . import View\n\n\nclass LoginView(View):\n children=[\n 'user_name_input',\n 'login_button'\n ]\n \n def on_login(self,action):\n  self.login_button.onclick=lambda _:action(self.user_name_input.value)\n  \n def show(self):\n  super(LoginView,self).show()\n  self.user_name_input.focus()\n  \n def login_error(self):\n  self.user_name_input.classList.add('is-danger')\n  self.user_name_input.classList.add('is-outlined')\n  self.user_name_input.value=''\n  self.user_name_input.focus()\n", ["tictactoe.views"]], "tictactoe.views.match_selector": [".py", "from . import View,fill_table\n\n\nclass MatchSelectorView(View):\n children=[\n 'match_id_input',\n 'match_password_input',\n 'join_button',\n 'match_table'\n ]\n \n def display_match_list(self,match_list):\n  if len(match_list)>0:\n   fill_table(self.doc,match_list,table_element=self.match_table,id='ID')\n   self.match_table.focus()\n   \n def on_join(self,action):\n  self.join_button.onclick=lambda _:action(\n  self.match_id_input.value,\n  self.match_password_input.value,\n  )\n  \n def show(self):\n  super(MatchSelectorView,self).show()\n  self.match_id_input.focus()\n", ["tictactoe.views"]]}
__BRYTHON__.update_VFS(scripts)
